name: jf
networks: { devnet: { driver: bridge } }
services:
  keycloak:
    image: quay.io/keycloak/keycloak:24.0.5
    command: ["start-dev", "--import-realm"]
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    ports: ["8080:8080"]
    volumes:
      - ../infra/keycloak/realm-export:/opt/keycloak/data/import
    networks: [devnet]
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:8080/realms/master || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

  keycloak-init:
    build:
      context: ../infra/keycloak
      dockerfile: Dockerfile.init
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      DEV_USER_PASSWORD: ${DEV_USER_PASSWORD}
    depends_on:
      - keycloak
    networks:
      - devnet

  sqldb:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: ${SA_PASSWORD}
    ports: ["1438:1433"]
    networks: [devnet]

  otel:
    image: otel/opentelemetry-collector:0.99.0
    command: ["--config=/etc/otelcol/config.yaml"]
    volumes:
      - ../infra/otel-collector-config.yaml:/etc/otelcol/config.yaml:ro
    ports: ["4317:4317", "4318:4318"]
    networks: [devnet]

  backend:
    build: { context: ../backend }
    environment:
      - ConnectionStrings__Default=${ConnectionStrings__Default}
    depends_on: [sqldb]
    ports: ["${BACKEND_PORT}:5000"]
    networks: [devnet]

  go-service:
    build: { context: ../go-service }
    ports: ["8081:8081"]
    networks: [devnet]

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.dev
    volumes:
      - ../frontend:/app # mount your local code
      - /app/node_modules
    depends_on: [backend, keycloak]
    ports: ["${FRONTEND_PORT}:3000"]
    networks: [devnet]
